// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())

  requests    Request[]
  histories   History[]
}

// model Request {
//   id           String     @id @default(cuid())
//   title         String?
//   url          String
//   method       HttpMethod
//   headers      Json?
//   params       Json?
//   body         Json?
//   userId       String
//   createdAt    DateTime   @default(now())

//   user       User        @relation(fields: [userId], references: [id])
//   response    Response?  @relation(fields: [responseId], references: [id])
//   responseId  String?    @unique

//   history     History?   
// }

// model Response {
//   id        String   @id @default(cuid())
//   body      Json?
//   status    Int
//   statusText String?
//   headers   Json?
//   requestId String
//   createdAt DateTime @default(now())

//   request    Request?
// }

// model History {
//   id        String   @id @default(cuid())
//   requestId String?  @unique
//   userId    String
//   timestamp DateTime @default(now())

//   request   Request  @relation(fields: [requestId], references: [id])
//   user      User     @relation(fields: [userId], references: [id])
// }

model Request {
  id           String     @id @default(cuid())
  title        String?
  url          String
  method       HttpMethod
  headers      Json?
  params       Json?
  body         Json?
  userId       String
  createdAt    DateTime   @default(now())

  user        User       @relation(fields: [userId], references: [id])
  response    Response?
  history     History?   // One-to-one relationship
}

model Response {
  id         String   @id @default(cuid())
  body       Json?
  status     Int
  statusText String?
  headers    Json?
  requestId  String   @unique
  createdAt  DateTime @default(now())

  request    Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
}

model History {
  id        String   @id @default(cuid())
  requestId String   @unique  
  userId    String
  timestamp DateTime @default(now())

  request   Request  @relation(fields: [requestId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])
}

enum HttpMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}
